1 ОПИС АРХІТЕКТУРИ СИСТЕМИ

Для розробки back-end частини було використано наступний стек технологій:
–	Python: Мова програмування високого рівня, що забезпечує швидку розробку та легкість підтримки коду.
–	Django: Потужний фреймворк для веб-розробки, що надає готові компоненти для роботи з базами даних, шаблонами, формами та іншими аспектами веб-додатків.
–	PostgreSQL: Надійна та масштабована реляційна база даних, що забезпечує високу продуктивність та цілісність даних.
Для написання API використовувався Django REST Framework для управління конфігурацією змінних середовища на сервері.
З метою забезпечення високого рівня надійності та безпеки паролів користувачів, у рамках даного проекту впроваджено хешування паролів у базі даних. Це процес перетворення вхідного паролю у непросте і незворотне значення, відоме як хеш-значення.
Також було реалізовано використання JWT-токен (JSON Web Token), який використовується для автентифікації та авторизації у системах. JWT-токени генеруються за допомогою криптографічних методів та містять інформацію, яка може бути розкодована за допомогою спеціального ключа. Зазвичай вони передаються між клієнтом і сервером для доступу до ресурсів системи. В якості архітектури, на якій буде базуватися серверна частина програмної системи, був обраний архітектурний патерн Model View Controller 

2 ПОБУДОВА ДІАГРАМИ РОЗГОРТАННЯ

Діаграма розгортання системи надає комплексне уявлення про фізичну архітектуру системи та взаємозв'язки між її складовими частинами. У цій системі база даних виступає як центральний елемент, забезпечуючи зберігання та доступ до всієї інформації про систему. Веб-сервер відповідає за обробку запитів, які надходять від користувачів через веб-інтерфейс та мобільний додаток, і взаємодіє з базою даних для отримання або збереження інформації. IoT пристрій забезпечує збір даних про хімічний склад повітря та надсилає ці дані до веб-сервера для подальшої обробки. Веб-інтерфейс та мобільний додаток дозволяють користувачам взаємодіяти з системою зручним способом через веб-браузери або мобільні пристрої.

3 ОПИС АРХІТЕКТУРИ СЕРВЕРНОЇ ЧАСТИНИ

Серверна архітектура програмного забезпечення складається з компонентів, відповідальних за обробку користувацьких запитів, керування даними та реалізацію логіки програми. Вона розроблена для ефективного виконання серверних функцій, обробки запитів і відповідей, забезпечення безпеки даних та інших аспектів, пов'язаних з роботою серверної частини програми.
Ключові компоненти серверної архітектури включають контролери, моделі, сервіси, шаблони та утиліти. Контролери обробляють вхідні запити від клієнтів або інших систем, моделі керують даними в системі, сервіси вміщують бізнес-логіку програми, шаблони відповідають за відображення даних користувачам, а утиліти надають різноманітні допоміжні функції та інструменти.
Застосування цих компонентів дозволяє створити ефективну та надійну серверну частину програмного забезпечення, здатну швидко обробляти користувацькі запити та забезпечувати високу продуктивність системи.

4 ПОБУДОВА ДІАГРАМИ ПРЕЦЕДЕНТІВ

1. Адміністратор може виконувати наступні дії в додатку:
– Автентифікація;
– Переглядати дані;
– Створення бекапів бази даних;
– Редагування даних у базі даних для усіх користувачів.
– Додавати нових адміністраторів.
– Переглядати локації усіх користувачів.
– Видаляти локації вибраних користувачів.
2. Користувач може виконувати наступні дії в додатку:
– Автентифікація;
– Створити власний акаунт;
– Змінити локалізацію;
– Перегляд локацій;
– Додавання та редагування локацій;
– Перегляд сповіщень;
– Моніторинг умов навколишнього середовища.
– Проводити оплату                  

5 ПОБУДОВА ER-ДІАГРАМИ

ER-модель містить наступні таблиці: 
–	«Користувач» – містить дані про користувачів;
–	«Локація» – містить дані про локацію що надглядається;
–	«Типи локацій» – містить всі можливі типи локацій;
–	«Повідомлення» – містить дані про повідомлення;
–	«Параметри» – містить дані про параметри;
–	«Дані моніторингу» – містить дані моніторингу;
Між сутностями були встановлені наступні звʼязки:
–	користувач – локації (1:М);
–	типи локацій – локації (1:М);
–	локації – дані моніторингу (1:М);
–	параметри – дані моніторингу (1:М);
–	локації –  повідомлення (1:М);

6 СПЕЦИФІКАЦІЯ REST

Модель	Метод	Адреса	Тіло запиту
User	POST	/api/v1/users/	first_name, last_name username, email, password, gender, birth_date
	POST	/api/v1/token/	username, password
	DELETE	/api/v1/users/	_id
	PATCH	/api/v1/users/	first_name, last_name username, email, new_password, confirm_new_password
Locations	GET	/api/v1/locations/	-
	POST	/api/v1/locations/	name, description, country,city,location_type
	PUTCH	/api/v1/locations/	_id, name, description, city, country 
	DELETE	/api/v1/locations/	_id
	POST	/api/v1/payment	-
	GET	/api/vi/locations-data	-
Admin	GET	/api/v1/users/	-
	POST	/api/v1/token/	username, password
	DELETE	/api/v1/users/	_id
  PUTCH	/api/v1/users	_id, first_name, last_name username, email, new_password
	POST	/api/v1/users/10/set_staff/	_id
	POST	/api/v1/users/10/set_superuser/	_id
	GET	/api/v1/locations/	-
	DELETE	/api/v1/locations/	_id

7 ПОБУДОВА ДІАГРАМИ ДІЯЛЬНОСТІ

Для розробки системи моніторингу екологічного стану місцевості розроблено діаграму діяльності, яка візуалізує взаємодію користувачів з системою та послідовність їх дій. Діаграма демонструє весь шлях користувача, починаючи від реєстрації в системі до завершення роботи з нею.

ВИСНОВКИ

Під час виконання цієї лабораторної роботи було розроблено серверну або back-end частину програмної системи. Робота над ER-моделлю даних дозволила створити структуровану модель, яка описує схему зберігання та організації інформації в системі.
Була розроблена архітектура системи з чітким визначенням компонентів, їх взаємозв’язків та способів взаємодії. Прийняті інженерні рішення враховували вимоги до системи, її функціональність та масштабованість. Для візуалізації взаємодії користувачів із системою були створені діаграми розгортання, прецедентів та станів. Посилання на відеоролик із доповіддю розміщено в додатку И, а розроблений код програми знаходиться в додатку К.



